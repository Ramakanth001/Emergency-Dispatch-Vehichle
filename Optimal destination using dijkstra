#include<stdio.h>
#define INF 99999999
int size,source_chosen,i,j,  allDistances[28];
void dijkstra(int graph[][size], int source) 
{
 int cost[size][size], distance[size];
 int traffic_graph[28][28];
 int visited[size], i, j, cnt, minDistance, nextNode;
 
 // Initialize cost matrix
 for(i = 0; i < size; i++) 
 {
    for(j = 0; j < size; j++) 
    {
        if(graph[i][j] == 0) 
        {
            cost[i][j] = INF;//If source and node aren't directly connected
        } 
        else 
        {
        cost[i][j] = graph[i][j];//If source and node are directly connected
        }
    }
 }
 // distance of roots directly conneted to source
 for(i = 0; i < size; i++) 
 {
 distance[i] = cost[source][i];// Distance from itself = 0
 visited[i] = 0;// since traversing starts from the source, that node is clearly visited
 }
 distance[source] = 0;// source is the starting point
 visited[source] = 1;
 cnt = 1;
 while(cnt < size - 1) 
 {
    minDistance = INF;
    for(i = 0; i < size; i++) 
    {
        if(distance[i] < minDistance && !visited[i]) //Adjacent and un-visited 
        {
            minDistance = distance[i];
            nextNode = i;
        }
    }
 visited[nextNode] = 1;
 for(i = 0; i < size; i++) 
 {
    //relaxation
   if(!visited[i]) 
    {
        if(minDistance + cost[nextNode][i]  < distance[i]) 
        {
            distance[i] = minDistance + cost[nextNode][i] ;
        }
    }
 } cnt++;
 }
 for(i = 0; i < size; i++) 
 {
    allDistances[i]=distance[i];
    printf("%d ", allDistances[i]);
 }
 
}

void main() {
 size = 28;
 int graph[28][28]={ 
     
                        {0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0},
                        {4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0},
                        {0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,3,0,0,0,0},
                        {0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0},
                        {0,0,0,0,0,2,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5},
                        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0},
                        {0,0,0,0,0,0,9,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
                        {0,0,0,0,0,0,0,0,0,4,0,0,2,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,0,5,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0},
                        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0},
                        {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,4,2,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                        {0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,3},
                        {0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
                        {0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,7,0,0,0},
                        {0,0,0,4,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,1,0,0,7,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0}
};

int traffic_graph[28][28]={ 
     

                        {0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0},
                        {2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                        {0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,2,0,0,0,0},
                        {0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0},
                        {0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0},
                        {0,0,0,0,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0},
                        {0,0,0,0,0,0,0,0,0,4,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
                        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0},
                        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,1,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                        {0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2},
                        {0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0},
                        {0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0},
                        {0,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,3,0,2,0,0,0,0,0,0,0,0,1,0,0,4,0,0,0,0,0},
                        {0,0,0,0,0,0,0,3,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0}


};
for(i = 0; i < size; i++) 
 {
    for(j = 0; j < size; j++) 
    {
        graph[i][j]=graph[i][j]+traffic_graph[i][j];
    }
 }
printf("Select source from the following:\n");
printf("****Prime City Locations***\n1.Georgopol\n2.LosSantos\n3.Novo\n4.Lipovka\n5.SanMartin\n6.YasnayaPolana\n7.Severny\n8.Pecado\n9.Gronnus\n10.Blomster\n11.Sosnovka\n12.Pochinki\n13.Miramar\n14.Livik\n15.Sanhok\n16.Rozhok\n17.LosLeones\n18.Gatka\n19.Zharki\n20.NorthYanton\n21.Mylta\n22.Midstein\n");
scanf("%d",& source_chosen);
printf("\t\t***Hospitals***\n1.Central Los Santos Medical Center\n2.Mount Zonah Medical Center\n3.Sandy Shores Medical Center\n4.The Bay Care Center\n5.Portola Trinity Medical Center\n6.St.Fiacre Medical Center\n\n\n");

dijkstra(graph, source_chosen-1);
int shortestDistance=allDistances[22];
int i=22,hosp=22;

printf("\nConsidering traffic and distance\nNearest hospital is : ");
while(i<28)
{
    if(allDistances[i]<shortestDistance)
    {
      shortestDistance=allDistances[i];
      hosp=i;  
    }
    i++;
}
switch(hosp+1)
{
    case 23 :
        printf("Central Los Santos Medical Center\n");
        break;
    case 24 :
        printf("Mount Zonah Medical Center\n");
        break;
    case 25 :
        printf("Sandy Shores Medical Center\n");
        break;
    case 26 :
        printf("The Bay Care Center\n");
        break;
    case 27 :
        printf("Portola Trinity Medical Center\n");
        break;
    case 28 :
        printf("St.Fiacre Medical Center\n");
        break;
}
printf("It is %d kms away",shortestDistance);
}
