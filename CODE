#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 10
#define INF 9999

//created only one login we can create more using structures,we can do it tomorrow
void login()
{
	char username[20];
	char password[30];
	printf("enter user name");
	gets(username);
	printf("enter password");
	gets(password);
	
	//we can iterate using for loop im the struct username and verify the details
	if(strcmp(username,"nikhil")==0)
	{
		if(strcmp(password,"1858")==0)
        {
	        printf("\n Welcome, Log in Successfull");
       	}
    	else
    	{
		printf("\n Invalid password");
    	}
    }
    else
    {
    	printf("\n Invalid username");
	}
	return 0;
}

//we can take the new details and add to structures so next time he can login
void signup()
{
	printf("\n hello");
	return 0;
}

void dijk(int G[MAX][MAX], int n, int start)
{
	int cost[MAX][MAX], dist[MAX], visited[MAX]; pred[MAX];
	int i,j,count,mindist,nextnode;
	
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(G[i][j]==0)
			{
				cost[i][j]= INF;
			}
			else
			{
				cost[i][j]=G[i][j];
			}
		}
	}
	
	for(i=0;i<n;i++)
	{
		dist[i]=cost[start][i];
		pred[i]=start;
		visited[i]=0;
	}
	
	dist[start]=0;
	visited[start]=1;
	count=1;
	
	while(count<n-1)
	{
		mindist =INF;
		for(i=0;i<n;i++)
		{
			if(dist[i]<mindist && !visited[i])
			{
				mindist=dist[i];
				nextnode=i;
			}
		}
		
		visited[nextnode]=1;
		
		for(i=0;i<n;i++)
		{
			if(!visited[i])
			{
				if(mindist + cost[nextnode][i] < dist[i])
				{
				    dist[i]=mindist + cost[nextnode][i];
				    pred[i]=nextnode;
				}
			}
		}
		count++;
	}
	
	//next we can print the shortest path
}

int main()
{
	int choice;
	//distances between the cities are already entered
	int d[MAX][MAX]=
	
	//no of cities taken now are 20
	int n=20;
	int i,j;
	
	//traffic between different cities are already entered
	int t[MAX,MAX]=
	
	//Based on the distance and traffic between the cities,a new adjacency matrix is created 
	// Based on which we calculate the shortest distance 
	int k=0;
	int G[MAX,MAX]=
	
	   for(i=0;i<n;i++)
	       {
	        	for(j=0;j<n;j++)
	   	         {
	   	              if(d[i][j]==0)
				      {
				 	    //no change as the cities which are not connected via an edge should not be disturbed
				 	    //k is a random value just kept it simply
				     	k++;
			          }
			          else
			          {
			  	      G[i,j]=d[i,j]+2*(t[i,j]);
				      }	
		       	}
	       }
    

	printf("\n 1.LOGIN");
	printf("\n 2.SIGN UP");
	scanf("%d",&choice);
	switch(choice)
	{
		case 1:login();
		break;
		case 2:signup();
		break;
		default:printf("\n Invalid choice");
	}
	
	 printf("\n Enter starting node");
    scanf("%d",&start);
    
    dijk(G, n, start);
    
    return 0;
	
}
